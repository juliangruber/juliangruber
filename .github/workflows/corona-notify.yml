name: Corona notify

on:
  push:
  schedule:
    - cron: '0 5 * * *'

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - uses: satackey/action-js-inline@v0.0.2
        id: rki
        with:
          script: |
            const core = require('@actions/core')
            const { get } = require('https')
            
            const url = 'https://services7.arcgis.com/mOBPykOjAyBO2ZKk/arcgis/rest/services/RKI_Landkreisdaten/FeatureServer/0/query?outFields=*&returnGeometry=false&resultOffset=0&resultRecordCount=10&f=json&orderByFields=cases7_per_100k%20desc&where=1%3D1&inSR=4326&geometry=%7B%22spatialReference%22%3A%7B%22latestWkid%22%3A3857%2C%22wkid%22%3A102100%7D%2C%22xmin%22%3A1149751.0163160919%2C%22ymin%22%3A6080183.255423946%2C%22xmax%22%3A1215563.29766954%2C%22ymax%22%3A6093559.735373834%7D&geometryType=esriGeometryEnvelope&spatialRel=esriSpatialRelIntersects'

            const boundaries = [35, 50, 100]
            const rules = [
              {
                check: n => n < 35,
                rule: '3 Haushalte (max 10 Personen) treffen'
              }, {
                check: n => n < 50,
                rule: 'Einzelhandel, Museen, Zoos, Gärten, Gedenkstätten offen'
              }, {
                check: n => n < 100 && n >= 50,
                rule: 'Einzelhandel, Museen, Zoos, Gärten, Gedenkstätten offen (zusätzlich beschränkt)'
              }, {
                check: n => n < 50,
                rule: 'Kontaktfreier Sport bis 10 Personen'
              }, {
                check: n => n < 100 && n >= 35,
                rule: '2 Haushalte (max 5 Personen) treffen'
              }, {
                check: n => n < 100,
                rule: 'Wechselunterricht in Schulen'
              }, {
                check: n => n < 100,
                rule: 'Kitas eingeschränkt'
              }, {
                check: n => n >= 100,
                rule: 'Wie bisher'
              }
            ]

            get(url, res => {
              let body = ''
              res.on('data', d => body += d.toString())
              res.on('end', () => {
                const obj = JSON.parse(body)
                const { attributes } = obj.features.filter(({ attributes: { GEN } }) => GEN === 'Kaufbeuren')[0]
                console.log(attributes.cases7_per_100k)
                core.setOutput('subject', `Inzidenz Kaufbeuren: ${Math.round(attributes.cases7_per_100k)}`)
                const rulesStr = rules
                  .filter(({ check }) => check(attributes.cases7_per_100k))
                  .map(({ rule }) => `- ${rule}`)
                  .join('\n')
                core.setOutput('body', `${rulesStr}\n\nAbstufungen: ${boundaries.join(', ')}`)
              })
            })
      - uses: dawidd6/action-send-mail@v2
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: ${{steps.rki.outputs.subject}}
          body: ${{steps.rki.outputs.body}}
          to: ${{secrets.MAIL_TO}}
          from: RKI
